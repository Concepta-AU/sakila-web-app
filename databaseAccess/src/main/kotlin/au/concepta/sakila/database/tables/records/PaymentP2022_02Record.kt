/*
 * This file is generated by jOOQ.
 */
package au.concepta.sakila.database.tables.records


import au.concepta.sakila.database.tables.PaymentP2022_02

import java.math.BigDecimal
import java.time.OffsetDateTime

import org.jooq.Record2
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("warnings")
open class PaymentP2022_02Record() : UpdatableRecordImpl<PaymentP2022_02Record>(PaymentP2022_02.PAYMENT_P2022_02) {

    open var paymentId: Int?
        set(value): Unit = set(0, value)
        get(): Int? = get(0) as Int?

    open var customerId: Int?
        set(value): Unit = set(1, value)
        get(): Int? = get(1) as Int?

    open var staffId: Int?
        set(value): Unit = set(2, value)
        get(): Int? = get(2) as Int?

    open var rentalId: Int?
        set(value): Unit = set(3, value)
        get(): Int? = get(3) as Int?

    open var amount: BigDecimal?
        set(value): Unit = set(4, value)
        get(): BigDecimal? = get(4) as BigDecimal?

    open var paymentDate: OffsetDateTime?
        set(value): Unit = set(5, value)
        get(): OffsetDateTime? = get(5) as OffsetDateTime?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record2<OffsetDateTime?, Int?> = super.key() as Record2<OffsetDateTime?, Int?>

    /**
     * Create a detached, initialised PaymentP2022_02Record
     */
    constructor(paymentId: Int? = null, customerId: Int? = null, staffId: Int? = null, rentalId: Int? = null, amount: BigDecimal? = null, paymentDate: OffsetDateTime? = null): this() {
        this.paymentId = paymentId
        this.customerId = customerId
        this.staffId = staffId
        this.rentalId = rentalId
        this.amount = amount
        this.paymentDate = paymentDate
        resetTouchedOnNotNull()
    }
}
