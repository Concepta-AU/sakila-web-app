@file:Suppress("warnings")
/*
 * This file is generated by jOOQ.
 */
package au.concepta.sakila.database.tables.references


import au.concepta.sakila.database.tables.Actor
import au.concepta.sakila.database.tables.ActorInfo
import au.concepta.sakila.database.tables.Address
import au.concepta.sakila.database.tables.Category
import au.concepta.sakila.database.tables.City
import au.concepta.sakila.database.tables.Country
import au.concepta.sakila.database.tables.Customer
import au.concepta.sakila.database.tables.CustomerList
import au.concepta.sakila.database.tables.Film
import au.concepta.sakila.database.tables.FilmActor
import au.concepta.sakila.database.tables.FilmCategory
import au.concepta.sakila.database.tables.FilmInStock
import au.concepta.sakila.database.tables.FilmList
import au.concepta.sakila.database.tables.FilmNotInStock
import au.concepta.sakila.database.tables.Inventory
import au.concepta.sakila.database.tables.Language
import au.concepta.sakila.database.tables.NicerButSlowerFilmList
import au.concepta.sakila.database.tables.Payment
import au.concepta.sakila.database.tables.PaymentP2022_01
import au.concepta.sakila.database.tables.PaymentP2022_02
import au.concepta.sakila.database.tables.PaymentP2022_03
import au.concepta.sakila.database.tables.PaymentP2022_04
import au.concepta.sakila.database.tables.PaymentP2022_05
import au.concepta.sakila.database.tables.PaymentP2022_06
import au.concepta.sakila.database.tables.PaymentP2022_07
import au.concepta.sakila.database.tables.Rental
import au.concepta.sakila.database.tables.RentalByCategory
import au.concepta.sakila.database.tables.RewardsReport
import au.concepta.sakila.database.tables.SalesByFilmCategory
import au.concepta.sakila.database.tables.SalesByStore
import au.concepta.sakila.database.tables.Staff
import au.concepta.sakila.database.tables.StaffList
import au.concepta.sakila.database.tables.Store
import au.concepta.sakila.database.tables.records.CustomerRecord
import au.concepta.sakila.database.tables.records.FilmInStockRecord
import au.concepta.sakila.database.tables.records.FilmNotInStockRecord

import java.math.BigDecimal

import org.jooq.Configuration
import org.jooq.Field
import org.jooq.Result



/**
 * The table <code>public.actor</code>.
 */
val ACTOR: Actor = Actor.ACTOR

/**
 * The table <code>public.actor_info</code>.
 */
val ACTOR_INFO: ActorInfo = ActorInfo.ACTOR_INFO

/**
 * The table <code>public.address</code>.
 */
val ADDRESS: Address = Address.ADDRESS

/**
 * The table <code>public.category</code>.
 */
val CATEGORY: Category = Category.CATEGORY

/**
 * The table <code>public.city</code>.
 */
val CITY: City = City.CITY

/**
 * The table <code>public.country</code>.
 */
val COUNTRY: Country = Country.COUNTRY

/**
 * The table <code>public.customer</code>.
 */
val CUSTOMER: Customer = Customer.CUSTOMER

/**
 * The table <code>public.customer_list</code>.
 */
val CUSTOMER_LIST: CustomerList = CustomerList.CUSTOMER_LIST

/**
 * The table <code>public.film</code>.
 */
val FILM: Film = Film.FILM

/**
 * The table <code>public.film_actor</code>.
 */
val FILM_ACTOR: FilmActor = FilmActor.FILM_ACTOR

/**
 * The table <code>public.film_category</code>.
 */
val FILM_CATEGORY: FilmCategory = FilmCategory.FILM_CATEGORY

/**
 * The table <code>public.film_in_stock</code>.
 */
val FILM_IN_STOCK: FilmInStock = FilmInStock.FILM_IN_STOCK

/**
 * Call <code>public.film_in_stock</code>.
 */
fun FILM_IN_STOCK(
      configuration: Configuration
    , pFilmId: Int?
    , pStoreId: Int?
): Result<FilmInStockRecord> = configuration.dsl().selectFrom(au.concepta.sakila.database.tables.FilmInStock.FILM_IN_STOCK.call(
      pFilmId
    , pStoreId
)).fetch()

/**
 * Get <code>public.film_in_stock</code> as a table.
 */
fun FILM_IN_STOCK(
      pFilmId: Int?
    , pStoreId: Int?
): FilmInStock = au.concepta.sakila.database.tables.FilmInStock.FILM_IN_STOCK.call(
    pFilmId,
    pStoreId
)

/**
 * Get <code>public.film_in_stock</code> as a table.
 */
fun FILM_IN_STOCK(
      pFilmId: Field<Int?>
    , pStoreId: Field<Int?>
): FilmInStock = au.concepta.sakila.database.tables.FilmInStock.FILM_IN_STOCK.call(
    pFilmId,
    pStoreId
)

/**
 * The table <code>public.film_list</code>.
 */
val FILM_LIST: FilmList = FilmList.FILM_LIST

/**
 * The table <code>public.film_not_in_stock</code>.
 */
val FILM_NOT_IN_STOCK: FilmNotInStock = FilmNotInStock.FILM_NOT_IN_STOCK

/**
 * Call <code>public.film_not_in_stock</code>.
 */
fun FILM_NOT_IN_STOCK(
      configuration: Configuration
    , pFilmId: Int?
    , pStoreId: Int?
): Result<FilmNotInStockRecord> = configuration.dsl().selectFrom(au.concepta.sakila.database.tables.FilmNotInStock.FILM_NOT_IN_STOCK.call(
      pFilmId
    , pStoreId
)).fetch()

/**
 * Get <code>public.film_not_in_stock</code> as a table.
 */
fun FILM_NOT_IN_STOCK(
      pFilmId: Int?
    , pStoreId: Int?
): FilmNotInStock = au.concepta.sakila.database.tables.FilmNotInStock.FILM_NOT_IN_STOCK.call(
    pFilmId,
    pStoreId
)

/**
 * Get <code>public.film_not_in_stock</code> as a table.
 */
fun FILM_NOT_IN_STOCK(
      pFilmId: Field<Int?>
    , pStoreId: Field<Int?>
): FilmNotInStock = au.concepta.sakila.database.tables.FilmNotInStock.FILM_NOT_IN_STOCK.call(
    pFilmId,
    pStoreId
)

/**
 * The table <code>public.inventory</code>.
 */
val INVENTORY: Inventory = Inventory.INVENTORY

/**
 * The table <code>public.language</code>.
 */
val LANGUAGE: Language = Language.LANGUAGE

/**
 * The table <code>public.nicer_but_slower_film_list</code>.
 */
val NICER_BUT_SLOWER_FILM_LIST: NicerButSlowerFilmList = NicerButSlowerFilmList.NICER_BUT_SLOWER_FILM_LIST

/**
 * The table <code>public.payment</code>.
 */
val PAYMENT: Payment = Payment.PAYMENT

/**
 * The table <code>public.payment_p2022_01</code>.
 */
val PAYMENT_P2022_01: PaymentP2022_01 = PaymentP2022_01.PAYMENT_P2022_01

/**
 * The table <code>public.payment_p2022_02</code>.
 */
val PAYMENT_P2022_02: PaymentP2022_02 = PaymentP2022_02.PAYMENT_P2022_02

/**
 * The table <code>public.payment_p2022_03</code>.
 */
val PAYMENT_P2022_03: PaymentP2022_03 = PaymentP2022_03.PAYMENT_P2022_03

/**
 * The table <code>public.payment_p2022_04</code>.
 */
val PAYMENT_P2022_04: PaymentP2022_04 = PaymentP2022_04.PAYMENT_P2022_04

/**
 * The table <code>public.payment_p2022_05</code>.
 */
val PAYMENT_P2022_05: PaymentP2022_05 = PaymentP2022_05.PAYMENT_P2022_05

/**
 * The table <code>public.payment_p2022_06</code>.
 */
val PAYMENT_P2022_06: PaymentP2022_06 = PaymentP2022_06.PAYMENT_P2022_06

/**
 * The table <code>public.payment_p2022_07</code>.
 */
val PAYMENT_P2022_07: PaymentP2022_07 = PaymentP2022_07.PAYMENT_P2022_07

/**
 * The table <code>public.rental</code>.
 */
val RENTAL: Rental = Rental.RENTAL

/**
 * The table <code>public.rental_by_category</code>.
 */
val RENTAL_BY_CATEGORY: RentalByCategory = RentalByCategory.RENTAL_BY_CATEGORY

/**
 * The table <code>public.rewards_report</code>.
 */
val REWARDS_REPORT: RewardsReport = RewardsReport.REWARDS_REPORT

/**
 * Call <code>public.rewards_report</code>.
 */
fun REWARDS_REPORT(
      configuration: Configuration
    , minMonthlyPurchases: Int?
    , minDollarAmountPurchased: BigDecimal?
): Result<CustomerRecord> = configuration.dsl().selectFrom(au.concepta.sakila.database.tables.RewardsReport.REWARDS_REPORT.call(
      minMonthlyPurchases
    , minDollarAmountPurchased
)).fetch()

/**
 * Get <code>public.rewards_report</code> as a table.
 */
fun REWARDS_REPORT(
      minMonthlyPurchases: Int?
    , minDollarAmountPurchased: BigDecimal?
): RewardsReport = au.concepta.sakila.database.tables.RewardsReport.REWARDS_REPORT.call(
    minMonthlyPurchases,
    minDollarAmountPurchased
)

/**
 * Get <code>public.rewards_report</code> as a table.
 */
fun REWARDS_REPORT(
      minMonthlyPurchases: Field<Int?>
    , minDollarAmountPurchased: Field<BigDecimal?>
): RewardsReport = au.concepta.sakila.database.tables.RewardsReport.REWARDS_REPORT.call(
    minMonthlyPurchases,
    minDollarAmountPurchased
)

/**
 * The table <code>public.sales_by_film_category</code>.
 */
val SALES_BY_FILM_CATEGORY: SalesByFilmCategory = SalesByFilmCategory.SALES_BY_FILM_CATEGORY

/**
 * The table <code>public.sales_by_store</code>.
 */
val SALES_BY_STORE: SalesByStore = SalesByStore.SALES_BY_STORE

/**
 * The table <code>public.staff</code>.
 */
val STAFF: Staff = Staff.STAFF

/**
 * The table <code>public.staff_list</code>.
 */
val STAFF_LIST: StaffList = StaffList.STAFF_LIST

/**
 * The table <code>public.store</code>.
 */
val STORE: Store = Store.STORE
