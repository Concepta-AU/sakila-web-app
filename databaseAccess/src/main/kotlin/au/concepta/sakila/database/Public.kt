/*
 * This file is generated by jOOQ.
 */
package au.concepta.sakila.database


import au.concepta.sakila.database.domains.BIGINT
import au.concepta.sakila.database.domains.YEAR
import au.concepta.sakila.database.tables.Actor
import au.concepta.sakila.database.tables.ActorInfo
import au.concepta.sakila.database.tables.Address
import au.concepta.sakila.database.tables.Category
import au.concepta.sakila.database.tables.City
import au.concepta.sakila.database.tables.Country
import au.concepta.sakila.database.tables.Customer
import au.concepta.sakila.database.tables.CustomerList
import au.concepta.sakila.database.tables.Film
import au.concepta.sakila.database.tables.FilmActor
import au.concepta.sakila.database.tables.FilmCategory
import au.concepta.sakila.database.tables.FilmInStock
import au.concepta.sakila.database.tables.FilmList
import au.concepta.sakila.database.tables.FilmNotInStock
import au.concepta.sakila.database.tables.Inventory
import au.concepta.sakila.database.tables.Language
import au.concepta.sakila.database.tables.NicerButSlowerFilmList
import au.concepta.sakila.database.tables.Payment
import au.concepta.sakila.database.tables.PaymentP2022_01
import au.concepta.sakila.database.tables.PaymentP2022_02
import au.concepta.sakila.database.tables.PaymentP2022_03
import au.concepta.sakila.database.tables.PaymentP2022_04
import au.concepta.sakila.database.tables.PaymentP2022_05
import au.concepta.sakila.database.tables.PaymentP2022_06
import au.concepta.sakila.database.tables.PaymentP2022_07
import au.concepta.sakila.database.tables.Rental
import au.concepta.sakila.database.tables.RentalByCategory
import au.concepta.sakila.database.tables.RewardsReport
import au.concepta.sakila.database.tables.SalesByFilmCategory
import au.concepta.sakila.database.tables.SalesByStore
import au.concepta.sakila.database.tables.Staff
import au.concepta.sakila.database.tables.StaffList
import au.concepta.sakila.database.tables.Store
import au.concepta.sakila.database.tables.records.CustomerRecord
import au.concepta.sakila.database.tables.records.FilmInStockRecord
import au.concepta.sakila.database.tables.records.FilmNotInStockRecord

import java.math.BigDecimal

import kotlin.collections.List

import org.jooq.Catalog
import org.jooq.Configuration
import org.jooq.Domain
import org.jooq.Field
import org.jooq.Result
import org.jooq.Table
import org.jooq.impl.DSL
import org.jooq.impl.SchemaImpl


/**
 * standard public schema
 */
@Suppress("warnings")
open class Public : SchemaImpl(DSL.name("public"), DefaultCatalog.DEFAULT_CATALOG, DSL.comment("standard public schema")) {
    companion object {

        /**
         * The reference instance of <code>public</code>
         */
        val PUBLIC: Public = Public()
    }

    /**
     * The table <code>public.actor</code>.
     */
    val ACTOR: Actor get() = Actor.ACTOR

    /**
     * The table <code>public.actor_info</code>.
     */
    val ACTOR_INFO: ActorInfo get() = ActorInfo.ACTOR_INFO

    /**
     * The table <code>public.address</code>.
     */
    val ADDRESS: Address get() = Address.ADDRESS

    /**
     * The table <code>public.category</code>.
     */
    val CATEGORY: Category get() = Category.CATEGORY

    /**
     * The table <code>public.city</code>.
     */
    val CITY: City get() = City.CITY

    /**
     * The table <code>public.country</code>.
     */
    val COUNTRY: Country get() = Country.COUNTRY

    /**
     * The table <code>public.customer</code>.
     */
    val CUSTOMER: Customer get() = Customer.CUSTOMER

    /**
     * The table <code>public.customer_list</code>.
     */
    val CUSTOMER_LIST: CustomerList get() = CustomerList.CUSTOMER_LIST

    /**
     * The table <code>public.film</code>.
     */
    val FILM: Film get() = Film.FILM

    /**
     * The table <code>public.film_actor</code>.
     */
    val FILM_ACTOR: FilmActor get() = FilmActor.FILM_ACTOR

    /**
     * The table <code>public.film_category</code>.
     */
    val FILM_CATEGORY: FilmCategory get() = FilmCategory.FILM_CATEGORY

    /**
     * The table <code>public.film_in_stock</code>.
     */
    val FILM_IN_STOCK: FilmInStock get() = FilmInStock.FILM_IN_STOCK

    /**
     * Call <code>public.film_in_stock</code>.
     */
    fun FILM_IN_STOCK(
          configuration: Configuration
        , pFilmId: Int?
        , pStoreId: Int?
    ): Result<FilmInStockRecord> = configuration.dsl().selectFrom(au.concepta.sakila.database.tables.FilmInStock.FILM_IN_STOCK.call(
          pFilmId
        , pStoreId
    )).fetch()

    /**
     * Get <code>public.film_in_stock</code> as a table.
     */
    fun FILM_IN_STOCK(
          pFilmId: Int?
        , pStoreId: Int?
    ): FilmInStock = au.concepta.sakila.database.tables.FilmInStock.FILM_IN_STOCK.call(
        pFilmId,
        pStoreId
    )

    /**
     * Get <code>public.film_in_stock</code> as a table.
     */
    fun FILM_IN_STOCK(
          pFilmId: Field<Int?>
        , pStoreId: Field<Int?>
    ): FilmInStock = au.concepta.sakila.database.tables.FilmInStock.FILM_IN_STOCK.call(
        pFilmId,
        pStoreId
    )

    /**
     * The table <code>public.film_list</code>.
     */
    val FILM_LIST: FilmList get() = FilmList.FILM_LIST

    /**
     * The table <code>public.film_not_in_stock</code>.
     */
    val FILM_NOT_IN_STOCK: FilmNotInStock get() = FilmNotInStock.FILM_NOT_IN_STOCK

    /**
     * Call <code>public.film_not_in_stock</code>.
     */
    fun FILM_NOT_IN_STOCK(
          configuration: Configuration
        , pFilmId: Int?
        , pStoreId: Int?
    ): Result<FilmNotInStockRecord> = configuration.dsl().selectFrom(au.concepta.sakila.database.tables.FilmNotInStock.FILM_NOT_IN_STOCK.call(
          pFilmId
        , pStoreId
    )).fetch()

    /**
     * Get <code>public.film_not_in_stock</code> as a table.
     */
    fun FILM_NOT_IN_STOCK(
          pFilmId: Int?
        , pStoreId: Int?
    ): FilmNotInStock = au.concepta.sakila.database.tables.FilmNotInStock.FILM_NOT_IN_STOCK.call(
        pFilmId,
        pStoreId
    )

    /**
     * Get <code>public.film_not_in_stock</code> as a table.
     */
    fun FILM_NOT_IN_STOCK(
          pFilmId: Field<Int?>
        , pStoreId: Field<Int?>
    ): FilmNotInStock = au.concepta.sakila.database.tables.FilmNotInStock.FILM_NOT_IN_STOCK.call(
        pFilmId,
        pStoreId
    )

    /**
     * The table <code>public.inventory</code>.
     */
    val INVENTORY: Inventory get() = Inventory.INVENTORY

    /**
     * The table <code>public.language</code>.
     */
    val LANGUAGE: Language get() = Language.LANGUAGE

    /**
     * The table <code>public.nicer_but_slower_film_list</code>.
     */
    val NICER_BUT_SLOWER_FILM_LIST: NicerButSlowerFilmList get() = NicerButSlowerFilmList.NICER_BUT_SLOWER_FILM_LIST

    /**
     * The table <code>public.payment</code>.
     */
    val PAYMENT: Payment get() = Payment.PAYMENT

    /**
     * The table <code>public.payment_p2022_01</code>.
     */
    val PAYMENT_P2022_01: PaymentP2022_01 get() = PaymentP2022_01.PAYMENT_P2022_01

    /**
     * The table <code>public.payment_p2022_02</code>.
     */
    val PAYMENT_P2022_02: PaymentP2022_02 get() = PaymentP2022_02.PAYMENT_P2022_02

    /**
     * The table <code>public.payment_p2022_03</code>.
     */
    val PAYMENT_P2022_03: PaymentP2022_03 get() = PaymentP2022_03.PAYMENT_P2022_03

    /**
     * The table <code>public.payment_p2022_04</code>.
     */
    val PAYMENT_P2022_04: PaymentP2022_04 get() = PaymentP2022_04.PAYMENT_P2022_04

    /**
     * The table <code>public.payment_p2022_05</code>.
     */
    val PAYMENT_P2022_05: PaymentP2022_05 get() = PaymentP2022_05.PAYMENT_P2022_05

    /**
     * The table <code>public.payment_p2022_06</code>.
     */
    val PAYMENT_P2022_06: PaymentP2022_06 get() = PaymentP2022_06.PAYMENT_P2022_06

    /**
     * The table <code>public.payment_p2022_07</code>.
     */
    val PAYMENT_P2022_07: PaymentP2022_07 get() = PaymentP2022_07.PAYMENT_P2022_07

    /**
     * The table <code>public.rental</code>.
     */
    val RENTAL: Rental get() = Rental.RENTAL

    /**
     * The table <code>public.rental_by_category</code>.
     */
    val RENTAL_BY_CATEGORY: RentalByCategory get() = RentalByCategory.RENTAL_BY_CATEGORY

    /**
     * The table <code>public.rewards_report</code>.
     */
    val REWARDS_REPORT: RewardsReport get() = RewardsReport.REWARDS_REPORT

    /**
     * Call <code>public.rewards_report</code>.
     */
    fun REWARDS_REPORT(
          configuration: Configuration
        , minMonthlyPurchases: Int?
        , minDollarAmountPurchased: BigDecimal?
    ): Result<CustomerRecord> = configuration.dsl().selectFrom(au.concepta.sakila.database.tables.RewardsReport.REWARDS_REPORT.call(
          minMonthlyPurchases
        , minDollarAmountPurchased
    )).fetch()

    /**
     * Get <code>public.rewards_report</code> as a table.
     */
    fun REWARDS_REPORT(
          minMonthlyPurchases: Int?
        , minDollarAmountPurchased: BigDecimal?
    ): RewardsReport = au.concepta.sakila.database.tables.RewardsReport.REWARDS_REPORT.call(
        minMonthlyPurchases,
        minDollarAmountPurchased
    )

    /**
     * Get <code>public.rewards_report</code> as a table.
     */
    fun REWARDS_REPORT(
          minMonthlyPurchases: Field<Int?>
        , minDollarAmountPurchased: Field<BigDecimal?>
    ): RewardsReport = au.concepta.sakila.database.tables.RewardsReport.REWARDS_REPORT.call(
        minMonthlyPurchases,
        minDollarAmountPurchased
    )

    /**
     * The table <code>public.sales_by_film_category</code>.
     */
    val SALES_BY_FILM_CATEGORY: SalesByFilmCategory get() = SalesByFilmCategory.SALES_BY_FILM_CATEGORY

    /**
     * The table <code>public.sales_by_store</code>.
     */
    val SALES_BY_STORE: SalesByStore get() = SalesByStore.SALES_BY_STORE

    /**
     * The table <code>public.staff</code>.
     */
    val STAFF: Staff get() = Staff.STAFF

    /**
     * The table <code>public.staff_list</code>.
     */
    val STAFF_LIST: StaffList get() = StaffList.STAFF_LIST

    /**
     * The table <code>public.store</code>.
     */
    val STORE: Store get() = Store.STORE

    override fun getCatalog(): Catalog = DefaultCatalog.DEFAULT_CATALOG

    override fun getDomains(): List<Domain<*>> = listOf(
        BIGINT,
        YEAR
    )

    override fun getTables(): List<Table<*>> = listOf(
        Actor.ACTOR,
        ActorInfo.ACTOR_INFO,
        Address.ADDRESS,
        Category.CATEGORY,
        City.CITY,
        Country.COUNTRY,
        Customer.CUSTOMER,
        CustomerList.CUSTOMER_LIST,
        Film.FILM,
        FilmActor.FILM_ACTOR,
        FilmCategory.FILM_CATEGORY,
        FilmInStock.FILM_IN_STOCK,
        FilmList.FILM_LIST,
        FilmNotInStock.FILM_NOT_IN_STOCK,
        Inventory.INVENTORY,
        Language.LANGUAGE,
        NicerButSlowerFilmList.NICER_BUT_SLOWER_FILM_LIST,
        Payment.PAYMENT,
        PaymentP2022_01.PAYMENT_P2022_01,
        PaymentP2022_02.PAYMENT_P2022_02,
        PaymentP2022_03.PAYMENT_P2022_03,
        PaymentP2022_04.PAYMENT_P2022_04,
        PaymentP2022_05.PAYMENT_P2022_05,
        PaymentP2022_06.PAYMENT_P2022_06,
        PaymentP2022_07.PAYMENT_P2022_07,
        Rental.RENTAL,
        RentalByCategory.RENTAL_BY_CATEGORY,
        RewardsReport.REWARDS_REPORT,
        SalesByFilmCategory.SALES_BY_FILM_CATEGORY,
        SalesByStore.SALES_BY_STORE,
        Staff.STAFF,
        StaffList.STAFF_LIST,
        Store.STORE
    )
}
