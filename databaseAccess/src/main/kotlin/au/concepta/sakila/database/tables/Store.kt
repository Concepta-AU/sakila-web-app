/*
 * This file is generated by jOOQ.
 */
package au.concepta.sakila.database.tables


import au.concepta.sakila.database.Public
import au.concepta.sakila.database.indexes.IDX_UNQ_MANAGER_STAFF_ID
import au.concepta.sakila.database.keys.CUSTOMER__CUSTOMER_STORE_ID_FKEY
import au.concepta.sakila.database.keys.INVENTORY__INVENTORY_STORE_ID_FKEY
import au.concepta.sakila.database.keys.STAFF__STAFF_STORE_ID_FKEY
import au.concepta.sakila.database.keys.STORE_PKEY
import au.concepta.sakila.database.keys.STORE__STORE_ADDRESS_ID_FKEY
import au.concepta.sakila.database.tables.Address.AddressPath
import au.concepta.sakila.database.tables.Customer.CustomerPath
import au.concepta.sakila.database.tables.Inventory.InventoryPath
import au.concepta.sakila.database.tables.Staff.StaffPath
import au.concepta.sakila.database.tables.records.StoreRecord

import java.time.OffsetDateTime

import kotlin.collections.Collection
import kotlin.collections.List

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.Index
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.Path
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("warnings")
open class Store(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, StoreRecord>?,
    parentPath: InverseForeignKey<out Record, StoreRecord>?,
    aliased: Table<StoreRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<StoreRecord>(
    alias,
    Public.PUBLIC,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>public.store</code>
         */
        val STORE: Store = Store()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<StoreRecord> = StoreRecord::class.java

    /**
     * The column <code>public.store.store_id</code>.
     */
    val STORE_ID: TableField<StoreRecord, Int?> = createField(DSL.name("store_id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "")

    /**
     * The column <code>public.store.manager_staff_id</code>.
     */
    val MANAGER_STAFF_ID: TableField<StoreRecord, Int?> = createField(DSL.name("manager_staff_id"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>public.store.address_id</code>.
     */
    val ADDRESS_ID: TableField<StoreRecord, Int?> = createField(DSL.name("address_id"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>public.store.last_update</code>.
     */
    val LAST_UPDATE: TableField<StoreRecord, OffsetDateTime?> = createField(DSL.name("last_update"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "")

    private constructor(alias: Name, aliased: Table<StoreRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<StoreRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<StoreRecord>?, where: Condition?): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>public.store</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.store</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.store</code> table reference
     */
    constructor(): this(DSL.name("store"), null)

    constructor(path: Table<out Record>, childPath: ForeignKey<out Record, StoreRecord>?, parentPath: InverseForeignKey<out Record, StoreRecord>?): this(Internal.createPathAlias(path, childPath, parentPath), path, childPath, parentPath, STORE, null, null)

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    open class StorePath : Store, Path<StoreRecord> {
        constructor(path: Table<out Record>, childPath: ForeignKey<out Record, StoreRecord>?, parentPath: InverseForeignKey<out Record, StoreRecord>?): super(path, childPath, parentPath)
        private constructor(alias: Name, aliased: Table<StoreRecord>): super(alias, aliased)
        override fun `as`(alias: String): StorePath = StorePath(DSL.name(alias), this)
        override fun `as`(alias: Name): StorePath = StorePath(alias, this)
        override fun `as`(alias: Table<*>): StorePath = StorePath(alias.qualifiedName, this)
    }
    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun getIndexes(): List<Index> = listOf(IDX_UNQ_MANAGER_STAFF_ID)
    override fun getIdentity(): Identity<StoreRecord, Int?> = super.getIdentity() as Identity<StoreRecord, Int?>
    override fun getPrimaryKey(): UniqueKey<StoreRecord> = STORE_PKEY
    override fun getReferences(): List<ForeignKey<StoreRecord, *>> = listOf(STORE__STORE_ADDRESS_ID_FKEY)

    /**
     * Get the implicit join path to the <code>public.address</code> table.
     */
    fun address(): AddressPath = address
    val address: AddressPath by lazy { AddressPath(this, STORE__STORE_ADDRESS_ID_FKEY, null) }

    private lateinit var _customer: CustomerPath

    /**
     * Get the implicit to-many join path to the <code>public.customer</code>
     * table
     */
    fun customer(): CustomerPath {
        if (!this::_customer.isInitialized)
            _customer = CustomerPath(this, null, CUSTOMER__CUSTOMER_STORE_ID_FKEY.inverseKey)

        return _customer;
    }

    val customer: CustomerPath
        get(): CustomerPath = customer()

    private lateinit var _inventory: InventoryPath

    /**
     * Get the implicit to-many join path to the <code>public.inventory</code>
     * table
     */
    fun inventory(): InventoryPath {
        if (!this::_inventory.isInitialized)
            _inventory = InventoryPath(this, null, INVENTORY__INVENTORY_STORE_ID_FKEY.inverseKey)

        return _inventory;
    }

    val inventory: InventoryPath
        get(): InventoryPath = inventory()

    private lateinit var _staff: StaffPath

    /**
     * Get the implicit to-many join path to the <code>public.staff</code> table
     */
    fun staff(): StaffPath {
        if (!this::_staff.isInitialized)
            _staff = StaffPath(this, null, STAFF__STAFF_STORE_ID_FKEY.inverseKey)

        return _staff;
    }

    val staff: StaffPath
        get(): StaffPath = staff()
    override fun `as`(alias: String): Store = Store(DSL.name(alias), this)
    override fun `as`(alias: Name): Store = Store(alias, this)
    override fun `as`(alias: Table<*>): Store = Store(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Store = Store(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Store = Store(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): Store = Store(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): Store = Store(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): Store = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): Store = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): Store = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): Store = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): Store = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): Store = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): Store = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): Store = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): Store = where(DSL.notExists(select))
}
