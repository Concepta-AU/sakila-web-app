/*
 * This file is generated by jOOQ.
 */
package au.concepta.sakila.database.tables


import au.concepta.sakila.database.Public
import au.concepta.sakila.database.indexes.RENTAL_CATEGORY
import au.concepta.sakila.database.tables.records.RentalByCategoryRecord

import java.math.BigDecimal

import kotlin.collections.Collection
import kotlin.collections.List

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Index
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.impl.DSL
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("warnings")
open class RentalByCategory(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, RentalByCategoryRecord>?,
    parentPath: InverseForeignKey<out Record, RentalByCategoryRecord>?,
    aliased: Table<RentalByCategoryRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<RentalByCategoryRecord>(
    alias,
    Public.PUBLIC,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.materializedView(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>public.rental_by_category</code>
         */
        val RENTAL_BY_CATEGORY: RentalByCategory = RentalByCategory()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<RentalByCategoryRecord> = RentalByCategoryRecord::class.java

    /**
     * The column <code>public.rental_by_category.category</code>.
     */
    val CATEGORY: TableField<RentalByCategoryRecord, String?> = createField(DSL.name("category"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>public.rental_by_category.total_sales</code>.
     */
    val TOTAL_SALES: TableField<RentalByCategoryRecord, BigDecimal?> = createField(DSL.name("total_sales"), SQLDataType.NUMERIC, this, "")

    private constructor(alias: Name, aliased: Table<RentalByCategoryRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<RentalByCategoryRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<RentalByCategoryRecord>?, where: Condition?): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>public.rental_by_category</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.rental_by_category</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.rental_by_category</code> table reference
     */
    constructor(): this(DSL.name("rental_by_category"), null)
    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun getIndexes(): List<Index> = listOf(RENTAL_CATEGORY)
    override fun `as`(alias: String): RentalByCategory = RentalByCategory(DSL.name(alias), this)
    override fun `as`(alias: Name): RentalByCategory = RentalByCategory(alias, this)
    override fun `as`(alias: Table<*>): RentalByCategory = RentalByCategory(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): RentalByCategory = RentalByCategory(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): RentalByCategory = RentalByCategory(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): RentalByCategory = RentalByCategory(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): RentalByCategory = RentalByCategory(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): RentalByCategory = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): RentalByCategory = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): RentalByCategory = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): RentalByCategory = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): RentalByCategory = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): RentalByCategory = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): RentalByCategory = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): RentalByCategory = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): RentalByCategory = where(DSL.notExists(select))
}
