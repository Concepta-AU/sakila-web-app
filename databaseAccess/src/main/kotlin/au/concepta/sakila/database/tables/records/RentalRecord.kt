/*
 * This file is generated by jOOQ.
 */
package au.concepta.sakila.database.tables.records


import au.concepta.sakila.database.tables.Rental

import java.time.OffsetDateTime

import org.jooq.Record1
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("warnings")
open class RentalRecord() : UpdatableRecordImpl<RentalRecord>(Rental.RENTAL) {

    open var rentalId: Int?
        set(value): Unit = set(0, value)
        get(): Int? = get(0) as Int?

    open var rentalDate: OffsetDateTime?
        set(value): Unit = set(1, value)
        get(): OffsetDateTime? = get(1) as OffsetDateTime?

    open var inventoryId: Int?
        set(value): Unit = set(2, value)
        get(): Int? = get(2) as Int?

    open var customerId: Int?
        set(value): Unit = set(3, value)
        get(): Int? = get(3) as Int?

    open var returnDate: OffsetDateTime?
        set(value): Unit = set(4, value)
        get(): OffsetDateTime? = get(4) as OffsetDateTime?

    open var staffId: Int?
        set(value): Unit = set(5, value)
        get(): Int? = get(5) as Int?

    open var lastUpdate: OffsetDateTime?
        set(value): Unit = set(6, value)
        get(): OffsetDateTime? = get(6) as OffsetDateTime?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Int?> = super.key() as Record1<Int?>

    /**
     * Create a detached, initialised RentalRecord
     */
    constructor(rentalId: Int? = null, rentalDate: OffsetDateTime? = null, inventoryId: Int? = null, customerId: Int? = null, returnDate: OffsetDateTime? = null, staffId: Int? = null, lastUpdate: OffsetDateTime? = null): this() {
        this.rentalId = rentalId
        this.rentalDate = rentalDate
        this.inventoryId = inventoryId
        this.customerId = customerId
        this.returnDate = returnDate
        this.staffId = staffId
        this.lastUpdate = lastUpdate
        resetTouchedOnNotNull()
    }
}
