/*
 * This file is generated by jOOQ.
 */
package au.concepta.sakila.database.tables


import au.concepta.sakila.database.Public
import au.concepta.sakila.database.indexes.IDX_FK_ADDRESS_ID
import au.concepta.sakila.database.indexes.IDX_FK_STORE_ID
import au.concepta.sakila.database.indexes.IDX_LAST_NAME
import au.concepta.sakila.database.keys.CUSTOMER_PKEY
import au.concepta.sakila.database.keys.CUSTOMER__CUSTOMER_ADDRESS_ID_FKEY
import au.concepta.sakila.database.keys.CUSTOMER__CUSTOMER_STORE_ID_FKEY
import au.concepta.sakila.database.keys.PAYMENT_P2022_01__PAYMENT_P2022_01_CUSTOMER_ID_FKEY
import au.concepta.sakila.database.keys.PAYMENT_P2022_02__PAYMENT_P2022_02_CUSTOMER_ID_FKEY
import au.concepta.sakila.database.keys.PAYMENT_P2022_03__PAYMENT_P2022_03_CUSTOMER_ID_FKEY
import au.concepta.sakila.database.keys.PAYMENT_P2022_04__PAYMENT_P2022_04_CUSTOMER_ID_FKEY
import au.concepta.sakila.database.keys.PAYMENT_P2022_05__PAYMENT_P2022_05_CUSTOMER_ID_FKEY
import au.concepta.sakila.database.keys.PAYMENT_P2022_06__PAYMENT_P2022_06_CUSTOMER_ID_FKEY
import au.concepta.sakila.database.keys.RENTAL__RENTAL_CUSTOMER_ID_FKEY
import au.concepta.sakila.database.tables.Address.AddressPath
import au.concepta.sakila.database.tables.PaymentP2022_01.PaymentP2022_01Path
import au.concepta.sakila.database.tables.PaymentP2022_02.PaymentP2022_02Path
import au.concepta.sakila.database.tables.PaymentP2022_03.PaymentP2022_03Path
import au.concepta.sakila.database.tables.PaymentP2022_04.PaymentP2022_04Path
import au.concepta.sakila.database.tables.PaymentP2022_05.PaymentP2022_05Path
import au.concepta.sakila.database.tables.PaymentP2022_06.PaymentP2022_06Path
import au.concepta.sakila.database.tables.Rental.RentalPath
import au.concepta.sakila.database.tables.Store.StorePath
import au.concepta.sakila.database.tables.records.CustomerRecord

import java.time.LocalDate
import java.time.OffsetDateTime

import kotlin.collections.Collection
import kotlin.collections.List

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.Index
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.Path
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("warnings")
open class Customer(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, CustomerRecord>?,
    parentPath: InverseForeignKey<out Record, CustomerRecord>?,
    aliased: Table<CustomerRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<CustomerRecord>(
    alias,
    Public.PUBLIC,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>public.customer</code>
         */
        val CUSTOMER: Customer = Customer()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<CustomerRecord> = CustomerRecord::class.java

    /**
     * The column <code>public.customer.customer_id</code>.
     */
    val CUSTOMER_ID: TableField<CustomerRecord, Int?> = createField(DSL.name("customer_id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "")

    /**
     * The column <code>public.customer.store_id</code>.
     */
    val STORE_ID: TableField<CustomerRecord, Int?> = createField(DSL.name("store_id"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>public.customer.first_name</code>.
     */
    val FIRST_NAME: TableField<CustomerRecord, String?> = createField(DSL.name("first_name"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>public.customer.last_name</code>.
     */
    val LAST_NAME: TableField<CustomerRecord, String?> = createField(DSL.name("last_name"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>public.customer.email</code>.
     */
    val EMAIL: TableField<CustomerRecord, String?> = createField(DSL.name("email"), SQLDataType.CLOB, this, "")

    /**
     * The column <code>public.customer.address_id</code>.
     */
    val ADDRESS_ID: TableField<CustomerRecord, Int?> = createField(DSL.name("address_id"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>public.customer.activebool</code>.
     */
    val ACTIVEBOOL: TableField<CustomerRecord, Boolean?> = createField(DSL.name("activebool"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.field(DSL.raw("true"), SQLDataType.BOOLEAN)), this, "")

    /**
     * The column <code>public.customer.create_date</code>.
     */
    val CREATE_DATE: TableField<CustomerRecord, LocalDate?> = createField(DSL.name("create_date"), SQLDataType.LOCALDATE.nullable(false).defaultValue(DSL.field(DSL.raw("CURRENT_DATE"), SQLDataType.LOCALDATE)), this, "")

    /**
     * The column <code>public.customer.last_update</code>.
     */
    val LAST_UPDATE: TableField<CustomerRecord, OffsetDateTime?> = createField(DSL.name("last_update"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).defaultValue(DSL.field(DSL.raw("now()"), SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "")

    /**
     * The column <code>public.customer.active</code>.
     */
    val ACTIVE: TableField<CustomerRecord, Int?> = createField(DSL.name("active"), SQLDataType.INTEGER, this, "")

    private constructor(alias: Name, aliased: Table<CustomerRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<CustomerRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<CustomerRecord>?, where: Condition?): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>public.customer</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.customer</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.customer</code> table reference
     */
    constructor(): this(DSL.name("customer"), null)

    constructor(path: Table<out Record>, childPath: ForeignKey<out Record, CustomerRecord>?, parentPath: InverseForeignKey<out Record, CustomerRecord>?): this(Internal.createPathAlias(path, childPath, parentPath), path, childPath, parentPath, CUSTOMER, null, null)

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    open class CustomerPath : Customer, Path<CustomerRecord> {
        constructor(path: Table<out Record>, childPath: ForeignKey<out Record, CustomerRecord>?, parentPath: InverseForeignKey<out Record, CustomerRecord>?): super(path, childPath, parentPath)
        private constructor(alias: Name, aliased: Table<CustomerRecord>): super(alias, aliased)
        override fun `as`(alias: String): CustomerPath = CustomerPath(DSL.name(alias), this)
        override fun `as`(alias: Name): CustomerPath = CustomerPath(alias, this)
        override fun `as`(alias: Table<*>): CustomerPath = CustomerPath(alias.qualifiedName, this)
    }
    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun getIndexes(): List<Index> = listOf(IDX_FK_ADDRESS_ID, IDX_FK_STORE_ID, IDX_LAST_NAME)
    override fun getIdentity(): Identity<CustomerRecord, Int?> = super.getIdentity() as Identity<CustomerRecord, Int?>
    override fun getPrimaryKey(): UniqueKey<CustomerRecord> = CUSTOMER_PKEY
    override fun getReferences(): List<ForeignKey<CustomerRecord, *>> = listOf(CUSTOMER__CUSTOMER_ADDRESS_ID_FKEY, CUSTOMER__CUSTOMER_STORE_ID_FKEY)

    /**
     * Get the implicit join path to the <code>public.address</code> table.
     */
    fun address(): AddressPath = address
    val address: AddressPath by lazy { AddressPath(this, CUSTOMER__CUSTOMER_ADDRESS_ID_FKEY, null) }

    /**
     * Get the implicit join path to the <code>public.store</code> table.
     */
    fun store(): StorePath = store
    val store: StorePath by lazy { StorePath(this, CUSTOMER__CUSTOMER_STORE_ID_FKEY, null) }

    private lateinit var _paymentP2022_01: PaymentP2022_01Path

    /**
     * Get the implicit to-many join path to the
     * <code>public.payment_p2022_01</code> table
     */
    fun paymentP2022_01(): PaymentP2022_01Path {
        if (!this::_paymentP2022_01.isInitialized)
            _paymentP2022_01 = PaymentP2022_01Path(this, null, PAYMENT_P2022_01__PAYMENT_P2022_01_CUSTOMER_ID_FKEY.inverseKey)

        return _paymentP2022_01;
    }

    val paymentP2022_01: PaymentP2022_01Path
        get(): PaymentP2022_01Path = paymentP2022_01()

    private lateinit var _paymentP2022_02: PaymentP2022_02Path

    /**
     * Get the implicit to-many join path to the
     * <code>public.payment_p2022_02</code> table
     */
    fun paymentP2022_02(): PaymentP2022_02Path {
        if (!this::_paymentP2022_02.isInitialized)
            _paymentP2022_02 = PaymentP2022_02Path(this, null, PAYMENT_P2022_02__PAYMENT_P2022_02_CUSTOMER_ID_FKEY.inverseKey)

        return _paymentP2022_02;
    }

    val paymentP2022_02: PaymentP2022_02Path
        get(): PaymentP2022_02Path = paymentP2022_02()

    private lateinit var _paymentP2022_03: PaymentP2022_03Path

    /**
     * Get the implicit to-many join path to the
     * <code>public.payment_p2022_03</code> table
     */
    fun paymentP2022_03(): PaymentP2022_03Path {
        if (!this::_paymentP2022_03.isInitialized)
            _paymentP2022_03 = PaymentP2022_03Path(this, null, PAYMENT_P2022_03__PAYMENT_P2022_03_CUSTOMER_ID_FKEY.inverseKey)

        return _paymentP2022_03;
    }

    val paymentP2022_03: PaymentP2022_03Path
        get(): PaymentP2022_03Path = paymentP2022_03()

    private lateinit var _paymentP2022_04: PaymentP2022_04Path

    /**
     * Get the implicit to-many join path to the
     * <code>public.payment_p2022_04</code> table
     */
    fun paymentP2022_04(): PaymentP2022_04Path {
        if (!this::_paymentP2022_04.isInitialized)
            _paymentP2022_04 = PaymentP2022_04Path(this, null, PAYMENT_P2022_04__PAYMENT_P2022_04_CUSTOMER_ID_FKEY.inverseKey)

        return _paymentP2022_04;
    }

    val paymentP2022_04: PaymentP2022_04Path
        get(): PaymentP2022_04Path = paymentP2022_04()

    private lateinit var _paymentP2022_05: PaymentP2022_05Path

    /**
     * Get the implicit to-many join path to the
     * <code>public.payment_p2022_05</code> table
     */
    fun paymentP2022_05(): PaymentP2022_05Path {
        if (!this::_paymentP2022_05.isInitialized)
            _paymentP2022_05 = PaymentP2022_05Path(this, null, PAYMENT_P2022_05__PAYMENT_P2022_05_CUSTOMER_ID_FKEY.inverseKey)

        return _paymentP2022_05;
    }

    val paymentP2022_05: PaymentP2022_05Path
        get(): PaymentP2022_05Path = paymentP2022_05()

    private lateinit var _paymentP2022_06: PaymentP2022_06Path

    /**
     * Get the implicit to-many join path to the
     * <code>public.payment_p2022_06</code> table
     */
    fun paymentP2022_06(): PaymentP2022_06Path {
        if (!this::_paymentP2022_06.isInitialized)
            _paymentP2022_06 = PaymentP2022_06Path(this, null, PAYMENT_P2022_06__PAYMENT_P2022_06_CUSTOMER_ID_FKEY.inverseKey)

        return _paymentP2022_06;
    }

    val paymentP2022_06: PaymentP2022_06Path
        get(): PaymentP2022_06Path = paymentP2022_06()

    private lateinit var _rental: RentalPath

    /**
     * Get the implicit to-many join path to the <code>public.rental</code>
     * table
     */
    fun rental(): RentalPath {
        if (!this::_rental.isInitialized)
            _rental = RentalPath(this, null, RENTAL__RENTAL_CUSTOMER_ID_FKEY.inverseKey)

        return _rental;
    }

    val rental: RentalPath
        get(): RentalPath = rental()
    override fun `as`(alias: String): Customer = Customer(DSL.name(alias), this)
    override fun `as`(alias: Name): Customer = Customer(alias, this)
    override fun `as`(alias: Table<*>): Customer = Customer(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Customer = Customer(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Customer = Customer(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): Customer = Customer(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): Customer = Customer(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): Customer = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): Customer = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): Customer = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): Customer = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): Customer = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): Customer = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): Customer = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): Customer = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): Customer = where(DSL.notExists(select))
}
