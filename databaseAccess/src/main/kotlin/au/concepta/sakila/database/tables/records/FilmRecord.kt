/*
 * This file is generated by jOOQ.
 */
package au.concepta.sakila.database.tables.records


import au.concepta.sakila.database.enums.MpaaRating
import au.concepta.sakila.database.tables.Film

import java.math.BigDecimal
import java.time.OffsetDateTime

import org.jooq.Record1
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("warnings")
open class FilmRecord() : UpdatableRecordImpl<FilmRecord>(Film.FILM) {

    open var filmId: Int?
        set(value): Unit = set(0, value)
        get(): Int? = get(0) as Int?

    open var title: String?
        set(value): Unit = set(1, value)
        get(): String? = get(1) as String?

    open var description: String?
        set(value): Unit = set(2, value)
        get(): String? = get(2) as String?

    open var releaseYear: Int?
        set(value): Unit = set(3, value)
        get(): Int? = get(3) as Int?

    open var languageId: Int?
        set(value): Unit = set(4, value)
        get(): Int? = get(4) as Int?

    open var originalLanguageId: Int?
        set(value): Unit = set(5, value)
        get(): Int? = get(5) as Int?

    open var rentalDuration: Short?
        set(value): Unit = set(6, value)
        get(): Short? = get(6) as Short?

    open var rentalRate: BigDecimal?
        set(value): Unit = set(7, value)
        get(): BigDecimal? = get(7) as BigDecimal?

    open var length: Short?
        set(value): Unit = set(8, value)
        get(): Short? = get(8) as Short?

    open var replacementCost: BigDecimal?
        set(value): Unit = set(9, value)
        get(): BigDecimal? = get(9) as BigDecimal?

    open var rating: MpaaRating?
        set(value): Unit = set(10, value)
        get(): MpaaRating? = get(10) as MpaaRating?

    open var lastUpdate: OffsetDateTime?
        set(value): Unit = set(11, value)
        get(): OffsetDateTime? = get(11) as OffsetDateTime?

    open var specialFeatures: Array<String?>?
        set(value): Unit = set(12, value)
        get(): Array<String?>? = get(12) as Array<String?>?

    open var fulltext: Any?
        set(value): Unit = set(13, value)
        get(): Any? = get(13) as Any?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Int?> = super.key() as Record1<Int?>

    /**
     * Create a detached, initialised FilmRecord
     */
    constructor(filmId: Int? = null, title: String? = null, description: String? = null, releaseYear: Int? = null, languageId: Int? = null, originalLanguageId: Int? = null, rentalDuration: Short? = null, rentalRate: BigDecimal? = null, length: Short? = null, replacementCost: BigDecimal? = null, rating: MpaaRating? = null, lastUpdate: OffsetDateTime? = null, specialFeatures: Array<String?>? = null, fulltext: Any? = null): this() {
        this.filmId = filmId
        this.title = title
        this.description = description
        this.releaseYear = releaseYear
        this.languageId = languageId
        this.originalLanguageId = originalLanguageId
        this.rentalDuration = rentalDuration
        this.rentalRate = rentalRate
        this.length = length
        this.replacementCost = replacementCost
        this.rating = rating
        this.lastUpdate = lastUpdate
        this.specialFeatures = specialFeatures
        this.fulltext = fulltext
        resetTouchedOnNotNull()
    }
}
