@file:Suppress("warnings")
/*
 * This file is generated by jOOQ.
 */
package au.concepta.sakila.database.keys


import au.concepta.sakila.database.tables.Actor
import au.concepta.sakila.database.tables.Address
import au.concepta.sakila.database.tables.Category
import au.concepta.sakila.database.tables.City
import au.concepta.sakila.database.tables.Country
import au.concepta.sakila.database.tables.Customer
import au.concepta.sakila.database.tables.Film
import au.concepta.sakila.database.tables.FilmActor
import au.concepta.sakila.database.tables.FilmCategory
import au.concepta.sakila.database.tables.Inventory
import au.concepta.sakila.database.tables.Language
import au.concepta.sakila.database.tables.Payment
import au.concepta.sakila.database.tables.PaymentP2022_01
import au.concepta.sakila.database.tables.PaymentP2022_02
import au.concepta.sakila.database.tables.PaymentP2022_03
import au.concepta.sakila.database.tables.PaymentP2022_04
import au.concepta.sakila.database.tables.PaymentP2022_05
import au.concepta.sakila.database.tables.PaymentP2022_06
import au.concepta.sakila.database.tables.PaymentP2022_07
import au.concepta.sakila.database.tables.Rental
import au.concepta.sakila.database.tables.Staff
import au.concepta.sakila.database.tables.Store
import au.concepta.sakila.database.tables.records.ActorRecord
import au.concepta.sakila.database.tables.records.AddressRecord
import au.concepta.sakila.database.tables.records.CategoryRecord
import au.concepta.sakila.database.tables.records.CityRecord
import au.concepta.sakila.database.tables.records.CountryRecord
import au.concepta.sakila.database.tables.records.CustomerRecord
import au.concepta.sakila.database.tables.records.FilmActorRecord
import au.concepta.sakila.database.tables.records.FilmCategoryRecord
import au.concepta.sakila.database.tables.records.FilmRecord
import au.concepta.sakila.database.tables.records.InventoryRecord
import au.concepta.sakila.database.tables.records.LanguageRecord
import au.concepta.sakila.database.tables.records.PaymentP2022_01Record
import au.concepta.sakila.database.tables.records.PaymentP2022_02Record
import au.concepta.sakila.database.tables.records.PaymentP2022_03Record
import au.concepta.sakila.database.tables.records.PaymentP2022_04Record
import au.concepta.sakila.database.tables.records.PaymentP2022_05Record
import au.concepta.sakila.database.tables.records.PaymentP2022_06Record
import au.concepta.sakila.database.tables.records.PaymentP2022_07Record
import au.concepta.sakila.database.tables.records.PaymentRecord
import au.concepta.sakila.database.tables.records.RentalRecord
import au.concepta.sakila.database.tables.records.StaffRecord
import au.concepta.sakila.database.tables.records.StoreRecord

import org.jooq.ForeignKey
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.QOM.ForeignKeyRule



// -------------------------------------------------------------------------
// UNIQUE and PRIMARY KEY definitions
// -------------------------------------------------------------------------

val ACTOR_PKEY: UniqueKey<ActorRecord> = Internal.createUniqueKey(Actor.ACTOR, DSL.name("actor_pkey"), arrayOf(Actor.ACTOR.ACTOR_ID), true)
val ADDRESS_PKEY: UniqueKey<AddressRecord> = Internal.createUniqueKey(Address.ADDRESS, DSL.name("address_pkey"), arrayOf(Address.ADDRESS.ADDRESS_ID), true)
val CATEGORY_PKEY: UniqueKey<CategoryRecord> = Internal.createUniqueKey(Category.CATEGORY, DSL.name("category_pkey"), arrayOf(Category.CATEGORY.CATEGORY_ID), true)
val CITY_PKEY: UniqueKey<CityRecord> = Internal.createUniqueKey(City.CITY, DSL.name("city_pkey"), arrayOf(City.CITY.CITY_ID), true)
val COUNTRY_PKEY: UniqueKey<CountryRecord> = Internal.createUniqueKey(Country.COUNTRY, DSL.name("country_pkey"), arrayOf(Country.COUNTRY.COUNTRY_ID), true)
val CUSTOMER_PKEY: UniqueKey<CustomerRecord> = Internal.createUniqueKey(Customer.CUSTOMER, DSL.name("customer_pkey"), arrayOf(Customer.CUSTOMER.CUSTOMER_ID), true)
val FILM_PKEY: UniqueKey<FilmRecord> = Internal.createUniqueKey(Film.FILM, DSL.name("film_pkey"), arrayOf(Film.FILM.FILM_ID), true)
val FILM_ACTOR_PKEY: UniqueKey<FilmActorRecord> = Internal.createUniqueKey(FilmActor.FILM_ACTOR, DSL.name("film_actor_pkey"), arrayOf(FilmActor.FILM_ACTOR.ACTOR_ID, FilmActor.FILM_ACTOR.FILM_ID), true)
val FILM_CATEGORY_PKEY: UniqueKey<FilmCategoryRecord> = Internal.createUniqueKey(FilmCategory.FILM_CATEGORY, DSL.name("film_category_pkey"), arrayOf(FilmCategory.FILM_CATEGORY.FILM_ID, FilmCategory.FILM_CATEGORY.CATEGORY_ID), true)
val INVENTORY_PKEY: UniqueKey<InventoryRecord> = Internal.createUniqueKey(Inventory.INVENTORY, DSL.name("inventory_pkey"), arrayOf(Inventory.INVENTORY.INVENTORY_ID), true)
val LANGUAGE_PKEY: UniqueKey<LanguageRecord> = Internal.createUniqueKey(Language.LANGUAGE, DSL.name("language_pkey"), arrayOf(Language.LANGUAGE.LANGUAGE_ID), true)
val PAYMENT_PKEY: UniqueKey<PaymentRecord> = Internal.createUniqueKey(Payment.PAYMENT, DSL.name("payment_pkey"), arrayOf(Payment.PAYMENT.PAYMENT_DATE, Payment.PAYMENT.PAYMENT_ID), true)
val PAYMENT_P2022_01_PKEY: UniqueKey<PaymentP2022_01Record> = Internal.createUniqueKey(PaymentP2022_01.PAYMENT_P2022_01, DSL.name("payment_p2022_01_pkey"), arrayOf(PaymentP2022_01.PAYMENT_P2022_01.PAYMENT_DATE, PaymentP2022_01.PAYMENT_P2022_01.PAYMENT_ID), true)
val PAYMENT_P2022_02_PKEY: UniqueKey<PaymentP2022_02Record> = Internal.createUniqueKey(PaymentP2022_02.PAYMENT_P2022_02, DSL.name("payment_p2022_02_pkey"), arrayOf(PaymentP2022_02.PAYMENT_P2022_02.PAYMENT_DATE, PaymentP2022_02.PAYMENT_P2022_02.PAYMENT_ID), true)
val PAYMENT_P2022_03_PKEY: UniqueKey<PaymentP2022_03Record> = Internal.createUniqueKey(PaymentP2022_03.PAYMENT_P2022_03, DSL.name("payment_p2022_03_pkey"), arrayOf(PaymentP2022_03.PAYMENT_P2022_03.PAYMENT_DATE, PaymentP2022_03.PAYMENT_P2022_03.PAYMENT_ID), true)
val PAYMENT_P2022_04_PKEY: UniqueKey<PaymentP2022_04Record> = Internal.createUniqueKey(PaymentP2022_04.PAYMENT_P2022_04, DSL.name("payment_p2022_04_pkey"), arrayOf(PaymentP2022_04.PAYMENT_P2022_04.PAYMENT_DATE, PaymentP2022_04.PAYMENT_P2022_04.PAYMENT_ID), true)
val PAYMENT_P2022_05_PKEY: UniqueKey<PaymentP2022_05Record> = Internal.createUniqueKey(PaymentP2022_05.PAYMENT_P2022_05, DSL.name("payment_p2022_05_pkey"), arrayOf(PaymentP2022_05.PAYMENT_P2022_05.PAYMENT_DATE, PaymentP2022_05.PAYMENT_P2022_05.PAYMENT_ID), true)
val PAYMENT_P2022_06_PKEY: UniqueKey<PaymentP2022_06Record> = Internal.createUniqueKey(PaymentP2022_06.PAYMENT_P2022_06, DSL.name("payment_p2022_06_pkey"), arrayOf(PaymentP2022_06.PAYMENT_P2022_06.PAYMENT_DATE, PaymentP2022_06.PAYMENT_P2022_06.PAYMENT_ID), true)
val PAYMENT_P2022_07_PKEY: UniqueKey<PaymentP2022_07Record> = Internal.createUniqueKey(PaymentP2022_07.PAYMENT_P2022_07, DSL.name("payment_p2022_07_pkey"), arrayOf(PaymentP2022_07.PAYMENT_P2022_07.PAYMENT_DATE, PaymentP2022_07.PAYMENT_P2022_07.PAYMENT_ID), true)
val RENTAL_PKEY: UniqueKey<RentalRecord> = Internal.createUniqueKey(Rental.RENTAL, DSL.name("rental_pkey"), arrayOf(Rental.RENTAL.RENTAL_ID), true)
val STAFF_PKEY: UniqueKey<StaffRecord> = Internal.createUniqueKey(Staff.STAFF, DSL.name("staff_pkey"), arrayOf(Staff.STAFF.STAFF_ID), true)
val STORE_PKEY: UniqueKey<StoreRecord> = Internal.createUniqueKey(Store.STORE, DSL.name("store_pkey"), arrayOf(Store.STORE.STORE_ID), true)

// -------------------------------------------------------------------------
// FOREIGN KEY definitions
// -------------------------------------------------------------------------

val ADDRESS__ADDRESS_CITY_ID_FKEY: ForeignKey<AddressRecord, CityRecord> = Internal.createForeignKey(Address.ADDRESS, DSL.name("address_city_id_fkey"), arrayOf(Address.ADDRESS.CITY_ID), au.concepta.sakila.database.keys.CITY_PKEY, arrayOf(City.CITY.CITY_ID), true, ForeignKeyRule.RESTRICT, ForeignKeyRule.CASCADE)
val CITY__CITY_COUNTRY_ID_FKEY: ForeignKey<CityRecord, CountryRecord> = Internal.createForeignKey(City.CITY, DSL.name("city_country_id_fkey"), arrayOf(City.CITY.COUNTRY_ID), au.concepta.sakila.database.keys.COUNTRY_PKEY, arrayOf(Country.COUNTRY.COUNTRY_ID), true, ForeignKeyRule.RESTRICT, ForeignKeyRule.CASCADE)
val CUSTOMER__CUSTOMER_ADDRESS_ID_FKEY: ForeignKey<CustomerRecord, AddressRecord> = Internal.createForeignKey(Customer.CUSTOMER, DSL.name("customer_address_id_fkey"), arrayOf(Customer.CUSTOMER.ADDRESS_ID), au.concepta.sakila.database.keys.ADDRESS_PKEY, arrayOf(Address.ADDRESS.ADDRESS_ID), true, ForeignKeyRule.RESTRICT, ForeignKeyRule.CASCADE)
val CUSTOMER__CUSTOMER_STORE_ID_FKEY: ForeignKey<CustomerRecord, StoreRecord> = Internal.createForeignKey(Customer.CUSTOMER, DSL.name("customer_store_id_fkey"), arrayOf(Customer.CUSTOMER.STORE_ID), au.concepta.sakila.database.keys.STORE_PKEY, arrayOf(Store.STORE.STORE_ID), true, ForeignKeyRule.RESTRICT, ForeignKeyRule.CASCADE)
val FILM__FILM_LANGUAGE_ID_FKEY: ForeignKey<FilmRecord, LanguageRecord> = Internal.createForeignKey(Film.FILM, DSL.name("film_language_id_fkey"), arrayOf(Film.FILM.LANGUAGE_ID), au.concepta.sakila.database.keys.LANGUAGE_PKEY, arrayOf(Language.LANGUAGE.LANGUAGE_ID), true, ForeignKeyRule.RESTRICT, ForeignKeyRule.CASCADE)
val FILM__FILM_ORIGINAL_LANGUAGE_ID_FKEY: ForeignKey<FilmRecord, LanguageRecord> = Internal.createForeignKey(Film.FILM, DSL.name("film_original_language_id_fkey"), arrayOf(Film.FILM.ORIGINAL_LANGUAGE_ID), au.concepta.sakila.database.keys.LANGUAGE_PKEY, arrayOf(Language.LANGUAGE.LANGUAGE_ID), true, ForeignKeyRule.RESTRICT, ForeignKeyRule.CASCADE)
val FILM_ACTOR__FILM_ACTOR_ACTOR_ID_FKEY: ForeignKey<FilmActorRecord, ActorRecord> = Internal.createForeignKey(FilmActor.FILM_ACTOR, DSL.name("film_actor_actor_id_fkey"), arrayOf(FilmActor.FILM_ACTOR.ACTOR_ID), au.concepta.sakila.database.keys.ACTOR_PKEY, arrayOf(Actor.ACTOR.ACTOR_ID), true, ForeignKeyRule.RESTRICT, ForeignKeyRule.CASCADE)
val FILM_ACTOR__FILM_ACTOR_FILM_ID_FKEY: ForeignKey<FilmActorRecord, FilmRecord> = Internal.createForeignKey(FilmActor.FILM_ACTOR, DSL.name("film_actor_film_id_fkey"), arrayOf(FilmActor.FILM_ACTOR.FILM_ID), au.concepta.sakila.database.keys.FILM_PKEY, arrayOf(Film.FILM.FILM_ID), true, ForeignKeyRule.RESTRICT, ForeignKeyRule.CASCADE)
val FILM_CATEGORY__FILM_CATEGORY_CATEGORY_ID_FKEY: ForeignKey<FilmCategoryRecord, CategoryRecord> = Internal.createForeignKey(FilmCategory.FILM_CATEGORY, DSL.name("film_category_category_id_fkey"), arrayOf(FilmCategory.FILM_CATEGORY.CATEGORY_ID), au.concepta.sakila.database.keys.CATEGORY_PKEY, arrayOf(Category.CATEGORY.CATEGORY_ID), true, ForeignKeyRule.RESTRICT, ForeignKeyRule.CASCADE)
val FILM_CATEGORY__FILM_CATEGORY_FILM_ID_FKEY: ForeignKey<FilmCategoryRecord, FilmRecord> = Internal.createForeignKey(FilmCategory.FILM_CATEGORY, DSL.name("film_category_film_id_fkey"), arrayOf(FilmCategory.FILM_CATEGORY.FILM_ID), au.concepta.sakila.database.keys.FILM_PKEY, arrayOf(Film.FILM.FILM_ID), true, ForeignKeyRule.RESTRICT, ForeignKeyRule.CASCADE)
val INVENTORY__INVENTORY_FILM_ID_FKEY: ForeignKey<InventoryRecord, FilmRecord> = Internal.createForeignKey(Inventory.INVENTORY, DSL.name("inventory_film_id_fkey"), arrayOf(Inventory.INVENTORY.FILM_ID), au.concepta.sakila.database.keys.FILM_PKEY, arrayOf(Film.FILM.FILM_ID), true, ForeignKeyRule.RESTRICT, ForeignKeyRule.CASCADE)
val INVENTORY__INVENTORY_STORE_ID_FKEY: ForeignKey<InventoryRecord, StoreRecord> = Internal.createForeignKey(Inventory.INVENTORY, DSL.name("inventory_store_id_fkey"), arrayOf(Inventory.INVENTORY.STORE_ID), au.concepta.sakila.database.keys.STORE_PKEY, arrayOf(Store.STORE.STORE_ID), true, ForeignKeyRule.RESTRICT, ForeignKeyRule.CASCADE)
val PAYMENT_P2022_01__PAYMENT_P2022_01_CUSTOMER_ID_FKEY: ForeignKey<PaymentP2022_01Record, CustomerRecord> = Internal.createForeignKey(PaymentP2022_01.PAYMENT_P2022_01, DSL.name("payment_p2022_01_customer_id_fkey"), arrayOf(PaymentP2022_01.PAYMENT_P2022_01.CUSTOMER_ID), au.concepta.sakila.database.keys.CUSTOMER_PKEY, arrayOf(Customer.CUSTOMER.CUSTOMER_ID), true, ForeignKeyRule.NO_ACTION, ForeignKeyRule.NO_ACTION)
val PAYMENT_P2022_01__PAYMENT_P2022_01_RENTAL_ID_FKEY: ForeignKey<PaymentP2022_01Record, RentalRecord> = Internal.createForeignKey(PaymentP2022_01.PAYMENT_P2022_01, DSL.name("payment_p2022_01_rental_id_fkey"), arrayOf(PaymentP2022_01.PAYMENT_P2022_01.RENTAL_ID), au.concepta.sakila.database.keys.RENTAL_PKEY, arrayOf(Rental.RENTAL.RENTAL_ID), true, ForeignKeyRule.NO_ACTION, ForeignKeyRule.NO_ACTION)
val PAYMENT_P2022_01__PAYMENT_P2022_01_STAFF_ID_FKEY: ForeignKey<PaymentP2022_01Record, StaffRecord> = Internal.createForeignKey(PaymentP2022_01.PAYMENT_P2022_01, DSL.name("payment_p2022_01_staff_id_fkey"), arrayOf(PaymentP2022_01.PAYMENT_P2022_01.STAFF_ID), au.concepta.sakila.database.keys.STAFF_PKEY, arrayOf(Staff.STAFF.STAFF_ID), true, ForeignKeyRule.NO_ACTION, ForeignKeyRule.NO_ACTION)
val PAYMENT_P2022_02__PAYMENT_P2022_02_CUSTOMER_ID_FKEY: ForeignKey<PaymentP2022_02Record, CustomerRecord> = Internal.createForeignKey(PaymentP2022_02.PAYMENT_P2022_02, DSL.name("payment_p2022_02_customer_id_fkey"), arrayOf(PaymentP2022_02.PAYMENT_P2022_02.CUSTOMER_ID), au.concepta.sakila.database.keys.CUSTOMER_PKEY, arrayOf(Customer.CUSTOMER.CUSTOMER_ID), true, ForeignKeyRule.NO_ACTION, ForeignKeyRule.NO_ACTION)
val PAYMENT_P2022_02__PAYMENT_P2022_02_RENTAL_ID_FKEY: ForeignKey<PaymentP2022_02Record, RentalRecord> = Internal.createForeignKey(PaymentP2022_02.PAYMENT_P2022_02, DSL.name("payment_p2022_02_rental_id_fkey"), arrayOf(PaymentP2022_02.PAYMENT_P2022_02.RENTAL_ID), au.concepta.sakila.database.keys.RENTAL_PKEY, arrayOf(Rental.RENTAL.RENTAL_ID), true, ForeignKeyRule.NO_ACTION, ForeignKeyRule.NO_ACTION)
val PAYMENT_P2022_02__PAYMENT_P2022_02_STAFF_ID_FKEY: ForeignKey<PaymentP2022_02Record, StaffRecord> = Internal.createForeignKey(PaymentP2022_02.PAYMENT_P2022_02, DSL.name("payment_p2022_02_staff_id_fkey"), arrayOf(PaymentP2022_02.PAYMENT_P2022_02.STAFF_ID), au.concepta.sakila.database.keys.STAFF_PKEY, arrayOf(Staff.STAFF.STAFF_ID), true, ForeignKeyRule.NO_ACTION, ForeignKeyRule.NO_ACTION)
val PAYMENT_P2022_03__PAYMENT_P2022_03_CUSTOMER_ID_FKEY: ForeignKey<PaymentP2022_03Record, CustomerRecord> = Internal.createForeignKey(PaymentP2022_03.PAYMENT_P2022_03, DSL.name("payment_p2022_03_customer_id_fkey"), arrayOf(PaymentP2022_03.PAYMENT_P2022_03.CUSTOMER_ID), au.concepta.sakila.database.keys.CUSTOMER_PKEY, arrayOf(Customer.CUSTOMER.CUSTOMER_ID), true, ForeignKeyRule.NO_ACTION, ForeignKeyRule.NO_ACTION)
val PAYMENT_P2022_03__PAYMENT_P2022_03_RENTAL_ID_FKEY: ForeignKey<PaymentP2022_03Record, RentalRecord> = Internal.createForeignKey(PaymentP2022_03.PAYMENT_P2022_03, DSL.name("payment_p2022_03_rental_id_fkey"), arrayOf(PaymentP2022_03.PAYMENT_P2022_03.RENTAL_ID), au.concepta.sakila.database.keys.RENTAL_PKEY, arrayOf(Rental.RENTAL.RENTAL_ID), true, ForeignKeyRule.NO_ACTION, ForeignKeyRule.NO_ACTION)
val PAYMENT_P2022_03__PAYMENT_P2022_03_STAFF_ID_FKEY: ForeignKey<PaymentP2022_03Record, StaffRecord> = Internal.createForeignKey(PaymentP2022_03.PAYMENT_P2022_03, DSL.name("payment_p2022_03_staff_id_fkey"), arrayOf(PaymentP2022_03.PAYMENT_P2022_03.STAFF_ID), au.concepta.sakila.database.keys.STAFF_PKEY, arrayOf(Staff.STAFF.STAFF_ID), true, ForeignKeyRule.NO_ACTION, ForeignKeyRule.NO_ACTION)
val PAYMENT_P2022_04__PAYMENT_P2022_04_CUSTOMER_ID_FKEY: ForeignKey<PaymentP2022_04Record, CustomerRecord> = Internal.createForeignKey(PaymentP2022_04.PAYMENT_P2022_04, DSL.name("payment_p2022_04_customer_id_fkey"), arrayOf(PaymentP2022_04.PAYMENT_P2022_04.CUSTOMER_ID), au.concepta.sakila.database.keys.CUSTOMER_PKEY, arrayOf(Customer.CUSTOMER.CUSTOMER_ID), true, ForeignKeyRule.NO_ACTION, ForeignKeyRule.NO_ACTION)
val PAYMENT_P2022_04__PAYMENT_P2022_04_RENTAL_ID_FKEY: ForeignKey<PaymentP2022_04Record, RentalRecord> = Internal.createForeignKey(PaymentP2022_04.PAYMENT_P2022_04, DSL.name("payment_p2022_04_rental_id_fkey"), arrayOf(PaymentP2022_04.PAYMENT_P2022_04.RENTAL_ID), au.concepta.sakila.database.keys.RENTAL_PKEY, arrayOf(Rental.RENTAL.RENTAL_ID), true, ForeignKeyRule.NO_ACTION, ForeignKeyRule.NO_ACTION)
val PAYMENT_P2022_04__PAYMENT_P2022_04_STAFF_ID_FKEY: ForeignKey<PaymentP2022_04Record, StaffRecord> = Internal.createForeignKey(PaymentP2022_04.PAYMENT_P2022_04, DSL.name("payment_p2022_04_staff_id_fkey"), arrayOf(PaymentP2022_04.PAYMENT_P2022_04.STAFF_ID), au.concepta.sakila.database.keys.STAFF_PKEY, arrayOf(Staff.STAFF.STAFF_ID), true, ForeignKeyRule.NO_ACTION, ForeignKeyRule.NO_ACTION)
val PAYMENT_P2022_05__PAYMENT_P2022_05_CUSTOMER_ID_FKEY: ForeignKey<PaymentP2022_05Record, CustomerRecord> = Internal.createForeignKey(PaymentP2022_05.PAYMENT_P2022_05, DSL.name("payment_p2022_05_customer_id_fkey"), arrayOf(PaymentP2022_05.PAYMENT_P2022_05.CUSTOMER_ID), au.concepta.sakila.database.keys.CUSTOMER_PKEY, arrayOf(Customer.CUSTOMER.CUSTOMER_ID), true, ForeignKeyRule.NO_ACTION, ForeignKeyRule.NO_ACTION)
val PAYMENT_P2022_05__PAYMENT_P2022_05_RENTAL_ID_FKEY: ForeignKey<PaymentP2022_05Record, RentalRecord> = Internal.createForeignKey(PaymentP2022_05.PAYMENT_P2022_05, DSL.name("payment_p2022_05_rental_id_fkey"), arrayOf(PaymentP2022_05.PAYMENT_P2022_05.RENTAL_ID), au.concepta.sakila.database.keys.RENTAL_PKEY, arrayOf(Rental.RENTAL.RENTAL_ID), true, ForeignKeyRule.NO_ACTION, ForeignKeyRule.NO_ACTION)
val PAYMENT_P2022_05__PAYMENT_P2022_05_STAFF_ID_FKEY: ForeignKey<PaymentP2022_05Record, StaffRecord> = Internal.createForeignKey(PaymentP2022_05.PAYMENT_P2022_05, DSL.name("payment_p2022_05_staff_id_fkey"), arrayOf(PaymentP2022_05.PAYMENT_P2022_05.STAFF_ID), au.concepta.sakila.database.keys.STAFF_PKEY, arrayOf(Staff.STAFF.STAFF_ID), true, ForeignKeyRule.NO_ACTION, ForeignKeyRule.NO_ACTION)
val PAYMENT_P2022_06__PAYMENT_P2022_06_CUSTOMER_ID_FKEY: ForeignKey<PaymentP2022_06Record, CustomerRecord> = Internal.createForeignKey(PaymentP2022_06.PAYMENT_P2022_06, DSL.name("payment_p2022_06_customer_id_fkey"), arrayOf(PaymentP2022_06.PAYMENT_P2022_06.CUSTOMER_ID), au.concepta.sakila.database.keys.CUSTOMER_PKEY, arrayOf(Customer.CUSTOMER.CUSTOMER_ID), true, ForeignKeyRule.NO_ACTION, ForeignKeyRule.NO_ACTION)
val PAYMENT_P2022_06__PAYMENT_P2022_06_RENTAL_ID_FKEY: ForeignKey<PaymentP2022_06Record, RentalRecord> = Internal.createForeignKey(PaymentP2022_06.PAYMENT_P2022_06, DSL.name("payment_p2022_06_rental_id_fkey"), arrayOf(PaymentP2022_06.PAYMENT_P2022_06.RENTAL_ID), au.concepta.sakila.database.keys.RENTAL_PKEY, arrayOf(Rental.RENTAL.RENTAL_ID), true, ForeignKeyRule.NO_ACTION, ForeignKeyRule.NO_ACTION)
val PAYMENT_P2022_06__PAYMENT_P2022_06_STAFF_ID_FKEY: ForeignKey<PaymentP2022_06Record, StaffRecord> = Internal.createForeignKey(PaymentP2022_06.PAYMENT_P2022_06, DSL.name("payment_p2022_06_staff_id_fkey"), arrayOf(PaymentP2022_06.PAYMENT_P2022_06.STAFF_ID), au.concepta.sakila.database.keys.STAFF_PKEY, arrayOf(Staff.STAFF.STAFF_ID), true, ForeignKeyRule.NO_ACTION, ForeignKeyRule.NO_ACTION)
val RENTAL__RENTAL_CUSTOMER_ID_FKEY: ForeignKey<RentalRecord, CustomerRecord> = Internal.createForeignKey(Rental.RENTAL, DSL.name("rental_customer_id_fkey"), arrayOf(Rental.RENTAL.CUSTOMER_ID), au.concepta.sakila.database.keys.CUSTOMER_PKEY, arrayOf(Customer.CUSTOMER.CUSTOMER_ID), true, ForeignKeyRule.RESTRICT, ForeignKeyRule.CASCADE)
val RENTAL__RENTAL_INVENTORY_ID_FKEY: ForeignKey<RentalRecord, InventoryRecord> = Internal.createForeignKey(Rental.RENTAL, DSL.name("rental_inventory_id_fkey"), arrayOf(Rental.RENTAL.INVENTORY_ID), au.concepta.sakila.database.keys.INVENTORY_PKEY, arrayOf(Inventory.INVENTORY.INVENTORY_ID), true, ForeignKeyRule.RESTRICT, ForeignKeyRule.CASCADE)
val RENTAL__RENTAL_STAFF_ID_FKEY: ForeignKey<RentalRecord, StaffRecord> = Internal.createForeignKey(Rental.RENTAL, DSL.name("rental_staff_id_fkey"), arrayOf(Rental.RENTAL.STAFF_ID), au.concepta.sakila.database.keys.STAFF_PKEY, arrayOf(Staff.STAFF.STAFF_ID), true, ForeignKeyRule.RESTRICT, ForeignKeyRule.CASCADE)
val STAFF__STAFF_ADDRESS_ID_FKEY: ForeignKey<StaffRecord, AddressRecord> = Internal.createForeignKey(Staff.STAFF, DSL.name("staff_address_id_fkey"), arrayOf(Staff.STAFF.ADDRESS_ID), au.concepta.sakila.database.keys.ADDRESS_PKEY, arrayOf(Address.ADDRESS.ADDRESS_ID), true, ForeignKeyRule.RESTRICT, ForeignKeyRule.CASCADE)
val STAFF__STAFF_STORE_ID_FKEY: ForeignKey<StaffRecord, StoreRecord> = Internal.createForeignKey(Staff.STAFF, DSL.name("staff_store_id_fkey"), arrayOf(Staff.STAFF.STORE_ID), au.concepta.sakila.database.keys.STORE_PKEY, arrayOf(Store.STORE.STORE_ID), true, ForeignKeyRule.NO_ACTION, ForeignKeyRule.NO_ACTION)
val STORE__STORE_ADDRESS_ID_FKEY: ForeignKey<StoreRecord, AddressRecord> = Internal.createForeignKey(Store.STORE, DSL.name("store_address_id_fkey"), arrayOf(Store.STORE.ADDRESS_ID), au.concepta.sakila.database.keys.ADDRESS_PKEY, arrayOf(Address.ADDRESS.ADDRESS_ID), true, ForeignKeyRule.RESTRICT, ForeignKeyRule.CASCADE)
